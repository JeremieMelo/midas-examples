####################################
# BONUS STEP: Reference Simulation #
####################################

##################
# Chisel Tutoral #
##################
# Chisel Emulator
$(addsuffix -ref-cpp, $(tut)) : %-ref-cpp: 
	mkdir -p $(log_dir) $(gen_dir)
	$(SBT) $(SBT_FLAGS) "run $* $(C_FLAGS)" | tee $(log_dir)/$@.out

# Verilog Simulation
$(addsuffix -ref-v, $(tut)) : %-ref-v: 
	mkdir -p $(log_dir) $(gen_dir)
	$(SBT) $(SBT_FLAGS) "run $* $(V_FLAGS)" | tee $(log_dir)/$@.out

# VCS RTL Simulation
$(addsuffix -ref-rtl, $(tut)) : %-ref-rtl: $(vcs_sim_rtl_dir)/%.$(CONFIG)
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run $* $(VCS_FLAGS) --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_rtl_dir)/$*.vpd" | tee $(log_dir)/$@.out

# VCS Post-Synthesis Simulation
$(addsuffix -ref-gl-syn, $(tut)) : %-ref-gl-syn: $(vcs_sim_gl_syn_dir)/%.$(CONFIG)
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run $* $(VCS_FLAGS) --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_gl_syn_dir)/$*.vpd" | tee $(log_dir)/$@.out

# VCS Post-Place-and-Route Simulation
$(addsuffix -ref-gl-par, $(tut)) : %-ref-gl-par: $(vcs_sim_gl_par_dir)/%.$(CONFIG)
	mkdir -p $(log_dir)
	rm -f $(vcs_sim_gl_par_dir)/$*-pipe.vcd
	vcd2saif -input $(vcs_sim_gl_par_dir)/$*-pipe.vcd -output $(vcs_sim_gl_par_dir)/$*.saif \
	-pipe "$(SBT) $(SBT_FLAGS) \"run $* $(VCS_FLAGS) --testCommand $< -q +vcs+initreg+0 +vcdfile=$(vcs_sim_gl_par_dir)/$*-pipe.vcd\"" | tee $(log_dir)/$@.out

# Reference Power
$(addsuffix -ref-pwr, $(tut)) : %-ref-pwr: %-ref-gl-par
	cd pt-pwr && rm -f current-pt && $(MAKE) MODEL=$*

##############
# riscv-mini #
##############
# Chisel Emulator
Tile-simple-ref-cpp: 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(C_FLAGS) $(simple_args)" | tee $(log_dir)/$@.out

Tile-isa-ref-cpp: 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(C_FLAGS) $(isa_args)" | tee $(log_dir)/$@.out

Tile-bmarks-ref-cpp: 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(C_FLAGS) $(bmarks_args)" | tee $(log_dir)/$@.out

$(addsuffix -ref-cpp, $(isa_tests)): %-ref-cpp: $(isa_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(C_FLAGS) +loadmem=$< +verbose +max-cycles=3000" | tee $(log_dir)/$@.out

$(addsuffix -ref-cpp, $(bmarks)): %-ref-cpp: $(bmarks_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(C_FLAGS) +loadmem=$< +max-cycles=500000" | tee $(log_dir)/$@.out

# Verilog Simulation
Tile-simple-ref-v: 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(V_FLAGS) $(simple_args)" | tee $(log_dir)/$@.out

Tile-isa-ref-v: 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(V_FLAGS) $(isa_args)" | tee $(log_dir)/$@.out

Tile-bmarks-ref-v: 
	mkdir -p $(log_dir) $(gen_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(V_FLAGS) $(bmarks_args)" | tee $(log_dir)/$@.out

$(addsuffix -ref-v, $(isa_tests)): %-ref-v: $(isa_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(V_FLAGS) +loadmem=$< +verbose +max-cycles=3000" | tee $(log_dir)/$@.out

$(addsuffix -ref-v, $(bmarks)): %-ref-v: $(bmarks_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(V_FLAGS) +loadmem=$< +max-cycles=500000" | tee $(log_dir)/$@.out

# VCS RTL Simulation
Tile-simple-ref-rtl: $(vcs_sim_rtl_dir)/Tile.$(CONFIG)
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) $(simple_args) --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_rtl_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

Tile-isa-ref-rtl: $(vcs_sim_rtl_dir)/Tile.$(CONFIG) 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) $(isa_args) --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_rtl_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

Tile-bmarks-ref-rtl: $(vcs_sim_rtl_dir)/Tile.$(CONFIG)
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) $(bmarks_args) --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_rtl_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-rtl, $(isa_tests)): %-ref-rtl: $(vcs_sim_rtl_dir)/Tile.$(CONFIG) $(isa_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +verbose +max-cycles=3000 --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_rtl_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-rtl, $(bmarks)): %-ref-rtl: $(vcs_sim_rtl_dir)/Tile.$(CONFIG) $(bmarks_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +max-cycles=500000 --testCommand $< -q +vcs+initr +vpdfile=$(vcs_sim_rtl_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

# VCS Post-Synthesis Simulation
Tile-isa-ref-gl-syn: $(vcs_sim_gl_syn_dir)/Tile.$(CONFIG) 
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) $(isa_args) --testCommand $< -q +vcs+initr +vpdfile=$(vcs_sim_gl_syn_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

Tile-bmarks-ref-gl-syn: $(vcs_sim_gl_syn_dir)/Tile.$(CONFIG)
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) $(bmarks_args) --testCommand $< -q +vcs+initr +vpdfile=$(vcs_sim_gl_syn_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-gl-syn, $(isa_tests)): %-ref-gl-syn: $(vcs_sim_gl_syn_dir)/Tile.$(CONFIG) $(isa_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +verbose +max-cycles=3000 --testCommand $< -q +vcs+initreg +vpdfile=$(vcs_sim_gl_syn_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-gl-syn, $(bmarks)): %-ref-gl-syn: $(vcs_sim_gl_syn_dir)/Tile.$(CONFIG) $(bmarks_dir)/%.hex
	mkdir -p $(log_dir)
	$(SBT) $(SBT_FLAGS) "run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +max-cycles=500000 --testCommand $< -q +vcs+initreg+0 +vpdfile=$(vcs_sim_gl_syn_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

# VCS Post-Place-and-Route Simulation
Tile-isa-ref-gl-par: $(vcs_sim_gl_par_dir)/Tile.$(CONFIG) 
	mkdir -p $(log_dir)
	rm -f $(vcs_sim_gl_par_dir)/Tile-pipe.vcd
	vcd2saif -input $(vcs_sim_gl_par_dir)/Tile-pipe.vcd -output $(vcs_sim_gl_par_dir)/Tile.saif \
	-pipe "$(SBT) $(SBT_FLAGS) \"run Tile $(VCS_FLAGS) $(isa_args) --testCommand $< -q +vcs+initreg+0 +vcdfile=$(vcs_sim_gl_par_dir)/Tile-pipe.vcd\" +vpdfile=$(vcs_sim_gl_par_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

Tile-bmarks-ref-gl-par: $(vcs_sim_gl_par_dir)/Tile.$(CONFIG)
	mkdir -p $(log_dir)
	rm -f $(vcs_sim_gl_par_dir)/Tile-pipe.vcd
	vcd2saif -input $(vcs_sim_gl_par_dir)/Tile-pipe.vcd -output $(vcs_sim_gl_par_dir)/Tile.saif \
	-pipe "$(SBT) $(SBT_FLAGS) \"run Tile $(VCS_FLAGS) $(bmarks_args) --testCommand $< -q +vcs+initreg+0 +vcdfile=$(vcs_sim_gl_par_dir)/Tile-pipe.vcd\" +vpdfile=$(vcs_sim_gl_par_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-gl-par, $(isa_tests)): %-ref-gl-par: $(vcs_sim_gl_par_dir)/Tile.$(CONFIG) $(isa_dir)/%.hex
	mkdir -p $(log_dir) 
	rm -f $(vcs_sim_gl_par_dir)/Tile-pipe.vcd
	vcd2saif -input $(vcs_sim_gl_par_dir)/Tile-pipe.vcd -output $(vcs_sim_gl_par_dir)/Tile.saif \
	-pipe "$(SBT) $(SBT_FLAGS) \"run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +max-cycles=30000 --testCommand $< -q +vcs+initreg+0 +vcdfile=$(vcs_sim_gl_par_dir)/Tile-pipe.vcd\" +vpdfile=$(vcs_sim_gl_par_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

$(addsuffix -ref-gl-par, $(bmarks)): %-ref-gl-par: $(vcs_sim_gl_par_dir)/Tile.$(CONFIG) $(bmarks_dir)/%.hex
	mkdir -p $(log_dir)
	rm -f $(vcs_sim_gl_par_dir)/Tile-pipe.vcd
	vcd2saif -input $(vcs_sim_gl_par_dir)/Tile-pipe.vcd -output $(vcs_sim_gl_par_dir)/Tile.saif \
	-pipe "$(SBT) $(SBT_FLAGS) \"run Tile $(VCS_FLAGS) +loadmem=$(word 2, $^) +max-cycles=500000 --testCommand $< -q +vcs+initreg+0 +vcdfile=$(vcs_sim_gl_par_dir)/Tile-pipe.vcd\" +vpdfile=$(vcs_sim_gl_par_dir)/Tile.vpd +vpdmem" | tee $(log_dir)/$@.out

# Reference Power
$(addsuffix -ref-pwr, Tile-simple Tile-isa Tile-bmarks $(isa_tests) $(bmarks)): %-ref-pwr: %-ref-gl-par
	cd pt-pwr && rm -f current-pt && $(MAKE) MODEL=Tile
